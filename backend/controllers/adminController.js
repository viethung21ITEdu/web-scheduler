const User = require('../models/userModel');
const Group = require('../models/groupModel');
const Enterprise = require('../models/enterpriseModel');
const Post = require('../models/postModel');
const db = require('../utils/db');

// L·∫•y th·ªëng k√™ t·ªïng quan cho dashboard
exports.getDashboardStats = async (req, res) => {
  try {
    console.log('üìä Fetching admin dashboard stats...');

    // Th·ªëng k√™ ng∆∞·ªùi d√πng
    const [userStats] = await db.query(`
      SELECT 
        COUNT(*) as total,
        SUM(CASE WHEN status = 'active' THEN 1 ELSE 0 END) as active,
        SUM(CASE WHEN DATE(created_at) = CURDATE() THEN 1 ELSE 0 END) as newToday,
        SUM(CASE WHEN YEARWEEK(created_at, 1) = YEARWEEK(CURDATE(), 1) THEN 1 ELSE 0 END) as newThisWeek
      FROM USERS
    `);

    // Th·ªëng k√™ b√†i ƒëƒÉng
    const [postStats] = await db.query(`
      SELECT 
        COUNT(*) as total,
        SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending,
        SUM(CASE WHEN status = 'approved' THEN 1 ELSE 0 END) as approved,
        SUM(CASE WHEN status = 'rejected' THEN 1 ELSE 0 END) as rejected
      FROM POSTS
    `);

    // Th·ªëng k√™ nh√≥m
    const [groupStats] = await db.query(`
      SELECT 
        COUNT(*) as total,
        SUM(CASE WHEN status = 'active' THEN 1 ELSE 0 END) as active,
        SUM(CASE WHEN YEARWEEK(created_at, 1) = YEARWEEK(CURDATE(), 1) THEN 1 ELSE 0 END) as newThisWeek
      FROM \`groups\`
    `);

    // Th·ªëng k√™ doanh nghi·ªáp
    const [enterpriseStats] = await db.query(`
      SELECT 
        COUNT(*) as total,
        SUM(CASE WHEN status = 'active' THEN 1 ELSE 0 END) as active,
        SUM(CASE WHEN status = 'inactive' THEN 1 ELSE 0 END) as pending
      FROM ENTERPRISES
    `);

    // B√°o c√°o g·∫ßn ƒë√¢y (gi·∫£ l·∫≠p - c√≥ th·ªÉ t·∫°o b·∫£ng reports ri√™ng)
    const [recentReports] = await db.query(`
      SELECT 
        'post' as type,
        'B√†i ƒëƒÉng ch·ªù duy·ªát' as title,
        'pending' as status,
        created_at as date,
        post_id as id
      FROM POSTS 
      WHERE status = 'pending'
      UNION ALL
      SELECT 
        'enterprise' as type,
        'Doanh nghi·ªáp ch·ªù duy·ªát' as title,
        'pending' as status,
        created_at as date,
        enterprise_id as id
      FROM ENTERPRISES 
      WHERE status = 'inactive'
      ORDER BY date DESC
      LIMIT 4
    `);

    const dashboardData = {
      userStats: userStats[0] || { total: 0, active: 0, newToday: 0, newThisWeek: 0 },
      postStats: postStats[0] || { total: 0, pending: 0, approved: 0, rejected: 0 },
      groupStats: groupStats[0] || { total: 0, active: 0, newThisWeek: 0 },
      enterpriseStats: enterpriseStats[0] || { total: 0, active: 0, pending: 0 },
      recentReports: recentReports || []
    };

    console.log('‚úÖ Dashboard stats fetched successfully:', dashboardData);
    res.json({
      success: true,
      data: dashboardData
    });

  } catch (error) {
    console.error('‚ùå Error fetching dashboard stats:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y th·ªëng k√™ dashboard'
    });
  }
};

// L·∫•y danh s√°ch ng∆∞·ªùi d√πng v·ªõi ph√¢n trang
exports.getUsers = async (req, res) => {
  try {
    const { page = 1, limit = 10, status, role } = req.query;
    const offset = (page - 1) * limit;

    let whereClause = 'WHERE 1=1';
    const params = [];

    if (status) {
      whereClause += ' AND status = ?';
      params.push(status);
    }

    if (role) {
      whereClause += ' AND role = ?';
      params.push(role);
    }

    const [users] = await db.query(`
      SELECT user_id, username, email, full_name, role, status, created_at
      FROM USERS 
      ${whereClause}
      ORDER BY created_at DESC
      LIMIT ? OFFSET ?
    `, [...params, parseInt(limit), parseInt(offset)]);

    const [totalCount] = await db.query(`
      SELECT COUNT(*) as total FROM USERS ${whereClause}
    `, params);

    res.json({
      success: true,
      data: {
        users,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: totalCount[0].total,
          totalPages: Math.ceil(totalCount[0].total / limit)
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Error fetching users:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng'
    });
  }
};

// L·∫•y danh s√°ch b√†i ƒëƒÉng v·ªõi ph√¢n trang
exports.getPosts = async (req, res) => {
  try {
    const { page = 1, limit = 10, status, enterprise_id } = req.query;
    const offset = (page - 1) * limit;

    let whereClause = 'WHERE 1=1';
    const params = [];

    if (status) {
      whereClause += ' AND p.status = ?';
      params.push(status);
    }

    if (enterprise_id) {
      whereClause += ' AND p.enterprise_id = ?';
      params.push(enterprise_id);
    }

    const [posts] = await db.query(`
      SELECT 
        p.post_id as id, p.title, p.content, p.status, p.created_at,
        e.name as enterprise_name, e.enterprise_type as type,
        e.address as enterprise_address,
        u.username, u.full_name
      FROM POSTS p
      LEFT JOIN ENTERPRISES e ON p.enterprise_id = e.enterprise_id
      LEFT JOIN USERS u ON e.user_id = u.user_id
      ${whereClause}
      ORDER BY p.created_at DESC
      LIMIT ? OFFSET ?
    `, [...params, parseInt(limit), parseInt(offset)]);

    const [totalCount] = await db.query(`
      SELECT COUNT(*) as total FROM POSTS p ${whereClause}
    `, params);

    res.json({
      success: true,
      data: {
        posts,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: totalCount[0].total,
          totalPages: Math.ceil(totalCount[0].total / limit)
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Error fetching posts:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch b√†i ƒëƒÉng'
    });
  }
};

// L·∫•y danh s√°ch nh√≥m v·ªõi ph√¢n trang
exports.getGroups = async (req, res) => {
  try {
    const { page = 1, limit = 10, status } = req.query;
    const offset = (page - 1) * limit;

    let whereClause = 'WHERE 1=1';
    const params = [];

    if (status) {
      whereClause += ' AND g.status = ?';
      params.push(status);
    }

    const [groups] = await db.query(`
      SELECT 
        g.group_id, g.name, g.description, g.status, g.created_at,
        leader.username as leader_username, leader.full_name as leader_name,
        COUNT(DISTINCT m.user_id) as member_count
      FROM \`groups\` g
      LEFT JOIN MEMBERSHIPS leader_membership ON g.group_id = leader_membership.group_id AND leader_membership.role_in_group = 'Leader'
      LEFT JOIN USERS leader ON leader_membership.user_id = leader.user_id
      LEFT JOIN MEMBERSHIPS m ON g.group_id = m.group_id
      ${whereClause}
      GROUP BY g.group_id, leader.user_id
      ORDER BY g.created_at DESC
      LIMIT ? OFFSET ?
    `, [...params, parseInt(limit), parseInt(offset)]);

    const [totalCount] = await db.query(`
      SELECT COUNT(*) as total FROM \`groups\` g ${whereClause}
    `, params);

    res.json({
      success: true,
      data: {
        groups,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: totalCount[0].total,
          totalPages: Math.ceil(totalCount[0].total / limit)
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Error fetching groups:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch nh√≥m'
    });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i nh√≥m (kh√≥a/m·ªü kh√≥a)
exports.updateGroupStatus = async (req, res) => {
  try {
    const { groupId } = req.params;
    const { status } = req.body;

    if (!['active', 'inactive'].includes(status)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'
      });
    }

    const [result] = await db.query(
      'UPDATE `groups` SET status = ? WHERE group_id = ?',
      [status, groupId]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y nh√≥m'
      });
    }

    res.json({
      success: true,
      message: `${status === 'inactive' ? 'Kh√≥a' : 'M·ªü kh√≥a'} nh√≥m th√†nh c√¥ng`
    });

  } catch (error) {
    console.error('‚ùå Error updating group status:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i nh√≥m'
    });
  }
};

// X√≥a nh√≥m
exports.deleteGroup = async (req, res) => {
  try {
    const { groupId } = req.params;

    // Ki·ªÉm tra nh√≥m c√≥ t·ªìn t·∫°i kh√¥ng
    const [existingGroup] = await db.query(
      'SELECT group_id FROM `groups` WHERE group_id = ?',
      [groupId]
    );

    if (existingGroup.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y nh√≥m'
      });
    }

    // X√≥a t·∫•t c·∫£ th√†nh vi√™n trong nh√≥m tr∆∞·ªõc
    await db.query('DELETE FROM MEMBERSHIPS WHERE group_id = ?', [groupId]);
    
    // X√≥a t·∫•t c·∫£ events c·ªßa nh√≥m
    await db.query('DELETE FROM EVENTS WHERE group_id = ?', [groupId]);
    
    // Sau ƒë√≥ x√≥a nh√≥m
    const [result] = await db.query('DELETE FROM `groups` WHERE group_id = ?', [groupId]);

    if (result.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ x√≥a nh√≥m'
      });
    }

    res.json({
      success: true,
      message: 'X√≥a nh√≥m th√†nh c√¥ng'
    });

  } catch (error) {
    console.error('‚ùå Error deleting group:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi x√≥a nh√≥m'
    });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i nhi·ªÅu nh√≥m c√πng l√∫c
exports.batchUpdateGroupStatus = async (req, res) => {
  try {
    const { groupIds, status } = req.body;

    if (!groupIds || !Array.isArray(groupIds) || groupIds.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Danh s√°ch nh√≥m kh√¥ng h·ª£p l·ªá'
      });
    }

    if (!['active', 'inactive'].includes(status)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'
      });
    }

    const placeholders = groupIds.map(() => '?').join(',');
    const [result] = await db.query(
      `UPDATE \`groups\` SET status = ? WHERE group_id IN (${placeholders})`,
      [status, ...groupIds]
    );

    res.json({
      success: true,
      message: `${status === 'inactive' ? 'Kh√≥a' : 'M·ªü kh√≥a'} ${result.affectedRows} nh√≥m th√†nh c√¥ng`
    });

  } catch (error) {
    console.error('‚ùå Error batch updating group status:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i nh√≥m'
    });
  }
};

// X√≥a nhi·ªÅu nh√≥m c√πng l√∫c
exports.batchDeleteGroups = async (req, res) => {
  try {
    const { groupIds } = req.body;

    if (!groupIds || !Array.isArray(groupIds) || groupIds.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Danh s√°ch nh√≥m kh√¥ng h·ª£p l·ªá'
      });
    }

    const placeholders = groupIds.map(() => '?').join(',');
    
    // X√≥a t·∫•t c·∫£ th√†nh vi√™n trong c√°c nh√≥m
    await db.query(
      `DELETE FROM MEMBERSHIPS WHERE group_id IN (${placeholders})`,
      groupIds
    );
    
    // X√≥a t·∫•t c·∫£ events c·ªßa c√°c nh√≥m
    await db.query(
      `DELETE FROM EVENTS WHERE group_id IN (${placeholders})`,
      groupIds
    );
    
    // X√≥a c√°c nh√≥m
    const [result] = await db.query(
      `DELETE FROM \`groups\` WHERE group_id IN (${placeholders})`,
      groupIds
    );

    res.json({
      success: true,
      message: `X√≥a ${result.affectedRows} nh√≥m th√†nh c√¥ng`
    });

  } catch (error) {
    console.error('‚ùå Error batch deleting groups:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi x√≥a nh√≥m'
    });
  }
};

// L·∫•y danh s√°ch doanh nghi·ªáp v·ªõi ph√¢n trang
exports.getEnterprises = async (req, res) => {
  try {
    const { page = 1, limit = 10, status } = req.query;
    const offset = (page - 1) * limit;

    let whereClause = 'WHERE 1=1';
    const params = [];

    if (status) {
      whereClause += ' AND e.status = ?';
      params.push(status);
    }

    const [enterprises] = await db.query(`
      SELECT 
        e.enterprise_id, e.name, e.enterprise_type, e.contact_person, 
        e.phone, e.address, e.website, e.description, e.opening_hours, 
        e.capacity, e.facilities, e.status, e.created_at,
        u.email, u.username, u.full_name
      FROM ENTERPRISES e
      LEFT JOIN USERS u ON e.user_id = u.user_id
      ${whereClause}
      ORDER BY e.created_at DESC
      LIMIT ? OFFSET ?
    `, [...params, parseInt(limit), parseInt(offset)]);

    const [totalCount] = await db.query(`
      SELECT COUNT(*) as total FROM ENTERPRISES e ${whereClause}
    `, params);

    res.json({
      success: true,
      data: {
        enterprises,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: totalCount[0].total,
          totalPages: Math.ceil(totalCount[0].total / limit)
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Error fetching enterprises:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch doanh nghi·ªáp'
    });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi d√πng
exports.updateUserStatus = async (req, res) => {
  try {
    const { userId } = req.params;
    const { status } = req.body;

    if (!['active', 'inactive', 'banned'].includes(status)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'
      });
    }

    const [result] = await db.query(
      'UPDATE USERS SET status = ? WHERE user_id = ?',
      [status, userId]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
      });
    }

    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi d√πng th√†nh c√¥ng'
    });

  } catch (error) {
    console.error('‚ùå Error updating user status:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi d√πng'
    });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i ƒëƒÉng
exports.updatePostStatus = async (req, res) => {
  try {
    const { postId } = req.params;
    const { status } = req.body;

    if (!['pending', 'approved', 'rejected'].includes(status)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'
      });
    }

    const [result] = await db.query(
      'UPDATE POSTS SET status = ? WHERE post_id = ?',
      [status, postId]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y b√†i ƒëƒÉng'
      });
    }

    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i ƒëƒÉng th√†nh c√¥ng'
    });

  } catch (error) {
    console.error('‚ùå Error updating post status:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i ƒëƒÉng'
    });
  }
};

// Th√™m ng∆∞·ªùi d√πng h√†ng lo·∫°t
exports.batchAddUsers = async (req, res) => {
  try {
    const { emails, defaultPassword, role = 'Member' } = req.body;

    if (!emails || !Array.isArray(emails) || emails.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Danh s√°ch email kh√¥ng h·ª£p l·ªá'
      });
    }

    if (!defaultPassword) {
      return res.status(400).json({
        success: false,
        message: 'M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh l√† b·∫Øt bu·ªôc'
      });
    }

    // Validate role
    if (!['Admin', 'Member', 'Enterprise'].includes(role)) {
      return res.status(400).json({
        success: false,
        message: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: Admin, Member, Enterprise'
      });
    }

    const bcrypt = require('bcrypt');
    const hashedPassword = await bcrypt.hash(defaultPassword, 10);

    const results = [];
    const errors = [];

    for (const email of emails) {
      try {
        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const [existingUser] = await db.query(
          'SELECT user_id FROM USERS WHERE email = ?',
          [email]
        );

        if (existingUser.length > 0) {
          errors.push(`Email ${email} ƒë√£ t·ªìn t·∫°i`);
          continue;
        }

        // T·∫°o username t·ª´ email
        const username = email.split('@')[0];
        
        // Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
        const [existingUsername] = await db.query(
          'SELECT user_id FROM USERS WHERE username = ?',
          [username]
        );

        let finalUsername = username;
        let counter = 1;
        while (existingUsername.length > 0) {
          finalUsername = `${username}${counter}`;
          const [checkUsername] = await db.query(
            'SELECT user_id FROM USERS WHERE username = ?',
            [finalUsername]
          );
          if (checkUsername.length === 0) break;
          counter++;
        }

        // T·∫°o user m·ªõi
        const [result] = await db.query(
          'INSERT INTO USERS (username, email, password, full_name, role, status) VALUES (?, ?, ?, ?, ?, ?)',
          [finalUsername, email, hashedPassword, email.split('@')[0], role, 'active']
        );

        results.push({
          user_id: result.insertId,
          username: finalUsername,
          email: email,
          full_name: email.split('@')[0],
          role: role
        });

      } catch (error) {
        console.error(`‚ùå Error creating user ${email}:`, error);
        errors.push(`L·ªói t·∫°o user ${email}: ${error.message}`);
      }
    }

    res.json({
      success: true,
      message: `ƒê√£ t·∫°o th√†nh c√¥ng ${results.length} ng∆∞·ªùi d√πng`,
      data: {
        created: results,
        errors: errors,
        total: emails.length,
        success_count: results.length,
        error_count: errors.length
      }
    });

  } catch (error) {
    console.error('‚ùå Error in batch add users:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi th√™m ng∆∞·ªùi d√πng h√†ng lo·∫°t'
    });
  }
};

// T√¨m ki·∫øm ng∆∞·ªùi d√πng
exports.searchUsers = async (req, res) => {
  try {
    const { query } = req.query;

    if (!query || query.trim().length < 2) {
      return res.status(400).json({
        success: false,
        message: 'T·ª´ kh√≥a t√¨m ki·∫øm ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±'
      });
    }

    const searchTerm = `%${query.trim()}%`;
    
    const [users] = await db.query(`
      SELECT user_id, username, email, full_name, role, status, created_at
      FROM USERS 
      WHERE (username LIKE ? OR email LIKE ? OR full_name LIKE ?)
        AND role != 'Admin'
      ORDER BY created_at DESC
      LIMIT 50
    `, [searchTerm, searchTerm, searchTerm]);

    res.json({
      success: true,
      data: users,
      total: users.length
    });

  } catch (error) {
    console.error('‚ùå Error searching users:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi t√¨m ki·∫øm ng∆∞·ªùi d√πng'
    });
  }
};

// X√≥a ng∆∞·ªùi d√πng
exports.deleteUser = async (req, res) => {
  try {
    const { userId } = req.params;

    // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
    const [user] = await db.query(
      'SELECT user_id, role FROM USERS WHERE user_id = ?',
      [userId]
    );

    if (user.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
      });
    }

    // Kh√¥ng cho ph√©p x√≥a Admin
    if (user[0].role === 'Admin') {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n Admin'
      });
    }

    // X√≥a user (CASCADE s·∫Ω t·ª± ƒë·ªông x√≥a c√°c b·∫£n ghi li√™n quan)
    const [result] = await db.query(
      'DELETE FROM USERS WHERE user_id = ?',
      [userId]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng'
      });
    }

    res.json({
      success: true,
      message: 'X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng'
    });

  } catch (error) {
    console.error('‚ùå Error deleting user:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi x√≥a ng∆∞·ªùi d√πng'
    });
  }
};

// X√≥a nhi·ªÅu ng∆∞·ªùi d√πng
exports.batchDeleteUsers = async (req, res) => {
  try {
    const { userIds } = req.body;

    if (!userIds || !Array.isArray(userIds) || userIds.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Danh s√°ch ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá'
      });
    }

    // Ki·ªÉm tra kh√¥ng c√≥ Admin trong danh s√°ch
    const [adminUsers] = await db.query(
      `SELECT user_id FROM USERS WHERE user_id IN (${userIds.map(() => '?').join(',')}) AND role = 'Admin'`,
      userIds
    );

    if (adminUsers.length > 0) {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n Admin'
      });
    }

    // X√≥a users
    const [result] = await db.query(
      `DELETE FROM USERS WHERE user_id IN (${userIds.map(() => '?').join(',')})`,
      userIds
    );

    res.json({
      success: true,
      message: `ƒê√£ x√≥a th√†nh c√¥ng ${result.affectedRows} ng∆∞·ªùi d√πng`,
      data: {
        deleted_count: result.affectedRows,
        requested_count: userIds.length
      }
    });

  } catch (error) {
    console.error('‚ùå Error batch deleting users:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi x√≥a ng∆∞·ªùi d√πng h√†ng lo·∫°t'
    });
  }
};

// T√¨m ki·∫øm doanh nghi·ªáp
exports.searchEnterprises = async (req, res) => {
  try {
    const { query } = req.query;

    if (!query || query.trim().length < 1) {
      return res.status(400).json({
        success: false,
        message: 'T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
      });
    }

    const searchTerm = `%${query.trim()}%`;
    
    const [enterprises] = await db.query(`
      SELECT 
        e.enterprise_id as id,
        e.name,
        e.enterprise_type as type,
        e.address,
        e.contact_person,
        e.phone,
        e.website,
        e.description,
        e.opening_hours,
        e.capacity,
        e.facilities,
        e.status,
        COUNT(p.post_id) as post_count
      FROM ENTERPRISES e
      LEFT JOIN POSTS p ON e.enterprise_id = p.enterprise_id
      WHERE e.name LIKE ? OR e.contact_person LIKE ?
      GROUP BY e.enterprise_id
      ORDER BY e.name ASC
      LIMIT 20
    `, [searchTerm, searchTerm]);

    res.json({
      success: true,
      data: enterprises,
      total: enterprises.length
    });

  } catch (error) {
    console.error('‚ùå Error searching enterprises:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi t√¨m ki·∫øm doanh nghi·ªáp'
    });
  }
};

// Duy·ªát doanh nghi·ªáp (chuy·ªÉn t·ª´ inactive/pending th√†nh active)
exports.approveEnterprise = async (req, res) => {
  try {
    const { id } = req.params;
    
    const success = await Enterprise.updateStatus(id, 'active');
    
    if (success) {
      res.json({
        success: true,
        message: 'Duy·ªát doanh nghi·ªáp th√†nh c√¥ng'
      });
    } else {
      res.status(400).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ duy·ªát doanh nghi·ªáp'
      });
    }
  } catch (error) {
    console.error('‚ùå Error approving enterprise:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi duy·ªát doanh nghi·ªáp'
    });
  }
};

// T·ª´ ch·ªëi/kh√≥a doanh nghi·ªáp (chuy·ªÉn th√†nh inactive)
exports.rejectEnterprise = async (req, res) => {
  try {
    const { id } = req.params;
    
    const success = await Enterprise.updateStatus(id, 'inactive');
    
    if (success) {
      res.json({
        success: true,
        message: 'T·ª´ ch·ªëi/kh√≥a doanh nghi·ªáp th√†nh c√¥ng'
      });
    } else {
      res.status(400).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ t·ª´ ch·ªëi/kh√≥a doanh nghi·ªáp'
      });
    }
  } catch (error) {
    console.error('‚ùå Error rejecting enterprise:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi t·ª´ ch·ªëi/kh√≥a doanh nghi·ªáp'
    });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i doanh nghi·ªáp (t·ªïng qu√°t)
exports.updateEnterpriseStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    if (!['active', 'inactive'].includes(status)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: active, inactive'
      });
    }

    const success = await Enterprise.updateStatus(id, status);
    
    if (success) {
      res.json({
        success: true,
        message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i doanh nghi·ªáp th√†nh c√¥ng'
      });
    } else {
      res.status(400).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i doanh nghi·ªáp'
      });
    }
  } catch (error) {
    console.error('‚ùå Error updating enterprise status:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i doanh nghi·ªáp'
    });
  }
};