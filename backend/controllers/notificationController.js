const Event = require('../models/eventModel');
const Group = require('../models/groupModel');
const Notification = require('../models/notificationModel');
const { sendEventNotification } = require('../services/emailService');

// G·ª≠i th√¥ng b√°o s·ª± ki·ªán qua email
exports.sendEventNotification = async (req, res) => {
  try {
    const { eventId } = req.params;
    const { customContent } = req.body; // Nh·∫≠n custom content t·ª´ request body
    
    console.log('üìß Sending event notification for event:', eventId);
    
    // L·∫•y th√¥ng tin s·ª± ki·ªán
    const event = await Event.getById(eventId);
    if (!event) {
      return res.status(404).json({ 
        success: false, 
        message: 'Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán' 
      });
    }
    
    // L·∫•y th√¥ng tin nh√≥m
    const group = await Group.getById(event.group_id);
    if (!group) {
      return res.status(404).json({ 
        success: false, 
        message: 'Kh√¥ng t√¨m th·∫•y nh√≥m' 
      });
    }
    
    // L·∫•y danh s√°ch th√†nh vi√™n nh√≥m
    const members = await Group.getMembers(event.group_id);
    if (!members || members.length === 0) {
      return res.status(400).json({ 
        success: false, 
        message: 'Nh√≥m kh√¥ng c√≥ th√†nh vi√™n n√†o' 
      });
    }
    
    // Format th·ªùi gian s·ª± ki·ªán
    let formattedTime = 'Ch∆∞a x√°c ƒë·ªãnh th·ªùi gian';
    if (event.timeslots) {
      try {
        const timeslots = typeof event.timeslots === 'string' 
          ? JSON.parse(event.timeslots) 
          : event.timeslots;
        
        if (timeslots.type === 'single') {
          const slot = timeslots.slots[0];
          const [year, month, day] = slot.date.split('-');
          const formattedDate = `${day}/${month}/${year}`;
          formattedTime = `${slot.day_name} ${formattedDate} (${slot.start_time} - ${slot.end_time})`;
        } else {
          // Multiple slots - hi·ªÉn th·ªã t√≥m t·∫Øt
          const firstSlot = timeslots.slots[0];
          const lastSlot = timeslots.slots[timeslots.slots.length - 1];
          formattedTime = `${firstSlot.day_name} ${firstSlot.start_time} - ${lastSlot.day_name} ${lastSlot.end_time} (${timeslots.slots.length} khung gi·ªù)`;
        }
      } catch (error) {
        console.error('‚ùå L·ªói parse timeslots:', error);
        // Fallback v·ªÅ legacy format
        if (event.start_time && event.end_time) {
          const startDate = new Date(event.start_time);
          const endDate = new Date(event.end_time);
          formattedTime = `${startDate.toLocaleDateString('vi-VN')} ${startDate.toLocaleTimeString('vi-VN')} - ${endDate.toLocaleTimeString('vi-VN')}`;
        }
      }
    } else if (event.start_time && event.end_time) {
      // Legacy format
      const startDate = new Date(event.start_time);
      const endDate = new Date(event.end_time);
      formattedTime = `${startDate.toLocaleDateString('vi-VN')} ${startDate.toLocaleTimeString('vi-VN')} - ${endDate.toLocaleTimeString('vi-VN')}`;
    }
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu s·ª± ki·ªán cho email
    const eventData = {
      name: event.name,
      venue: event.venue,
      time: formattedTime
    };
    
    const groupData = {
      group_id: group.group_id,
      name: group.name
    };
    
    console.log('üìß Event data:', eventData);
    console.log('üìß Group data:', groupData);
    console.log('üìß Recipients:', members.length);
    console.log('üìß Custom content:', customContent);
    
    // G·ª≠i email th√¥ng b√°o
    const emailResult = await sendEventNotification(eventData, groupData, members, customContent);
    
    if (emailResult.success) {
      // L∆∞u th√¥ng b√°o v√†o database
      try {
        const notificationData = {
          event_id: eventId,
          title: customContent?.subject || `Th√¥ng b√°o s·ª± ki·ªán: ${event.name}`,
          content: customContent?.subtitle || 'Th√¥ng b√°o s·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn c√°c th√†nh vi√™n',
          status: 'sent',
          recipients_count: emailResult.totalRecipients,
          success_count: emailResult.successCount,
          fail_count: emailResult.failCount
        };
        
        const notificationId = await Notification.create(notificationData);
        console.log('‚úÖ Notification saved to database with ID:', notificationId);
      } catch (dbError) {
        console.error('‚ùå Error saving notification to database:', dbError);
        // Kh√¥ng return error v√¨ email ƒë√£ g·ª≠i th√†nh c√¥ng
      }
      
      res.status(200).json({
        success: true,
        message: 'G·ª≠i th√¥ng b√°o th√†nh c√¥ng',
        data: {
          totalRecipients: emailResult.totalRecipients,
          successCount: emailResult.successCount,
          failCount: emailResult.failCount
        }
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i email',
        error: emailResult.error
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error in sendEventNotification:', error);
    res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i th√¥ng b√°o',
      error: error.message
    });
  }
};

// Test email service
exports.testEmailService = async (req, res) => {
  try {
    const { testEmailConnection } = require('../services/emailService');
    const isReady = await testEmailConnection();
    
    if (isReady) {
      res.status(200).json({
        success: true,
        message: 'Email service is ready'
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'Email service is not configured properly'
      });
    }
  } catch (error) {
    console.error('‚ùå Error testing email service:', error);
    res.status(500).json({
      success: false,
      message: 'Error testing email service',
      error: error.message
    });
  }
};

// L·∫•y danh s√°ch th√¥ng b√°o c·ªßa m·ªôt s·ª± ki·ªán
exports.getEventNotifications = async (req, res) => {
  try {
    const { eventId } = req.params;
    
    const notifications = await Notification.getByEventId(eventId);
    
    res.status(200).json({
      success: true,
      data: notifications
    });
  } catch (error) {
    console.error('‚ùå Error getting event notifications:', error);
    res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch th√¥ng b√°o',
      error: error.message
    });
  }
};

// L·∫•y danh s√°ch th√¥ng b√°o c·ªßa m·ªôt nh√≥m
exports.getGroupNotifications = async (req, res) => {
  try {
    const { groupId } = req.params;
    
    const notifications = await Notification.getByGroupId(groupId);
    
    res.status(200).json({
      success: true,
      data: notifications
    });
  } catch (error) {
    console.error('‚ùå Error getting group notifications:', error);
    res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch th√¥ng b√°o nh√≥m',
      error: error.message
    });
  }
};

// L·∫•y th·ªëng k√™ th√¥ng b√°o
exports.getNotificationStats = async (req, res) => {
  try {
    const { groupId } = req.query;
    
    const stats = await Notification.getStats(groupId);
    
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('‚ùå Error getting notification stats:', error);
    res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi l·∫•y th·ªëng k√™ th√¥ng b√°o',
      error: error.message
    });
  }
};

// X√≥a th√¥ng b√°o
exports.deleteNotification = async (req, res) => {
  try {
    const { notificationId } = req.params;
    
    const deleted = await Notification.delete(notificationId);
    
    if (deleted) {
      res.status(200).json({
        success: true,
        message: 'X√≥a th√¥ng b√°o th√†nh c√¥ng'
      });
    } else {
      res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o'
      });
    }
  } catch (error) {
    console.error('‚ùå Error deleting notification:', error);
    res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi x√≥a th√¥ng b√°o',
      error: error.message
    });
  }
}; 