const Time = require('../models/timeModel');

// L·∫•y t·∫•t c·∫£ timeslots c·ªßa user hi·ªán t·∫°i trong m·ªôt nh√≥m c·ª• th·ªÉ
exports.getUserTimeslots = async (req, res) => {
  try {
    const userId = req.user.user_id;
    const { groupId } = req.query;
    
    if (!groupId) {
      return res.status(400).json({
        success: false,
        message: 'Group ID l√† b·∫Øt bu·ªôc'
      });
    }
    
    const timeslots = await Time.getUserTimeslots(userId, parseInt(groupId));
    
    res.status(200).json({
      success: true,
      data: timeslots,
      message: 'L·∫•y danh s√°ch th·ªùi gian th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y timeslots:', error);
    res.status(500).json({
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch th·ªùi gian'
    });
  }
};

// L·∫•y t·∫•t c·∫£ timeslots c·ªßa user hi·ªán t·∫°i (kh√¥ng ph√¢n bi·ªát nh√≥m)
exports.getAllUserTimeslots = async (req, res) => {
  try {
    const userId = req.user.user_id;
    const timeslots = await Time.getAllUserTimeslots(userId);
    
    res.status(200).json({
      success: true,
      data: timeslots,
      message: 'L·∫•y danh s√°ch th·ªùi gian th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y t·∫•t c·∫£ timeslots:', error);
    res.status(500).json({
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch th·ªùi gian'
    });
  }
};

// T·∫°o timeslot m·ªõi
exports.createTimeslot = async (req, res) => {
  try {
    const userId = req.user.user_id;
    const { start_time, end_time, group_id } = req.body;

    console.log('- Extracted userId:', userId);
    console.log('- Extracted data:', { start_time, end_time, group_id });

    // Validate required fields
    if (!start_time || !end_time || !group_id) {
      console.log('‚ùå Validation failed - missing required fields');
      return res.status(400).json({
        success: false,
        message: 'Th·ªùi gian b·∫Øt ƒë·∫ßu, k·∫øt th√∫c v√† group_id l√† b·∫Øt bu·ªôc'
      });
    }

    // Validate time logic
    if (new Date(start_time) >= new Date(end_time)) {
      return res.status(400).json({
        success: false,
        message: 'Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc th·ªùi gian k·∫øt th√∫c'
      });
    }

    const timeslotData = {
      user_id: userId,
      group_id: parseInt(group_id),
      start_time,
      end_time
    };

    console.log('- Final timeslotData:', timeslotData);
    console.log('‚úÖ About to call Time.createTimeslot');

    const timeslotId = await Time.createTimeslot(timeslotData);
    
    console.log('‚úÖ Timeslot created successfully with ID:', timeslotId);
    
    res.status(201).json({
      success: true,
      data: { timeslot_id: timeslotId },
      message: 'T·∫°o th·ªùi gian th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('‚ùå DETAILED ERROR in createTimeslot:', error);
    console.error('‚ùå Error message:', error.message);
    console.error('‚ùå Error stack:', error.stack);
    res.status(500).json({
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o th·ªùi gian'
    });
  }
};

// C·∫≠p nh·∫≠t timeslot
exports.updateTimeslot = async (req, res) => {
  try {
    const timeslotId = req.params.id;
    const userId = req.user.user_id;
    const { start_time, end_time } = req.body;

    // Ki·ªÉm tra ownership
    const isOwner = await Time.isTimeslotOwner(timeslotId, userId);
    if (!isOwner) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a th·ªùi gian n√†y'
      });
    }

    // Validate time logic if provided
    if (start_time && end_time && new Date(start_time) >= new Date(end_time)) {
      return res.status(400).json({
        success: false,
        message: 'Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc th·ªùi gian k·∫øt th√∫c'
      });
    }

    const timeslotData = {
      start_time,
      end_time
    };

    const success = await Time.updateTimeslot(timeslotId, timeslotData);
    
    if (success) {
      res.status(200).json({
        success: true,
        message: 'C·∫≠p nh·∫≠t th·ªùi gian th√†nh c√¥ng'
      });
    } else {
      res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th·ªùi gian ƒë·ªÉ c·∫≠p nh·∫≠t'
      });
    }
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t timeslot:', error);
    res.status(500).json({
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th·ªùi gian'
    });
  }
};

// X√≥a timeslot
exports.deleteTimeslot = async (req, res) => {
  try {
    const timeslotId = req.params.id;
    const userId = req.user.user_id;

    console.log('üóëÔ∏è DELETE timeslot request:');
    console.log('- timeslotId:', timeslotId);
    console.log('- userId:', userId);
    console.log('- req.user:', req.user);

    // Ki·ªÉm tra xem timeslot c√≥ t·ªìn t·∫°i kh√¥ng
    const isOwner = await Time.isTimeslotOwner(timeslotId, userId);
    console.log('- isOwner check:', isOwner);

    if (!isOwner) {
      console.log('‚ùå Ownership check failed');
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a th·ªùi gian n√†y ho·∫∑c th·ªùi gian kh√¥ng t·ªìn t·∫°i'
      });
    }

    const success = await Time.deleteTimeslot(timeslotId, userId);
    console.log('- Delete result:', success);
    
    if (success) {
      console.log('‚úÖ Delete successful');
      res.status(200).json({
        success: true,
        message: 'X√≥a th·ªùi gian th√†nh c√¥ng'
      });
    } else {
      console.log('‚ùå Delete failed');
      res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th·ªùi gian ƒë·ªÉ x√≥a'
      });
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi x√≥a timeslot:', error);
    res.status(500).json({
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi x√≥a th·ªùi gian'
    });
  }
};

// L·∫•y timeslots c·ªßa t·∫•t c·∫£ th√†nh vi√™n trong nh√≥m
exports.getGroupTimeslots = async (req, res) => {
  try {
    const groupId = req.params.groupId;
    const timeslots = await Time.getGroupTimeslots(groupId);
    
    // Group by user
    const groupedTimeslots = timeslots.reduce((acc, slot) => {
      const userId = slot.user_id;
      if (!acc[userId]) {
        acc[userId] = {
          user_id: userId,
          username: slot.username,
          full_name: slot.full_name,
          timeslots: []
        };
      }
      acc[userId].timeslots.push({
        timeslot_id: slot.timeslot_id,
        start_time: slot.start_time,
        end_time: slot.end_time
      });
      return acc;
    }, {});
    
    res.status(200).json({
      success: true,
      data: Object.values(groupedTimeslots),
      message: 'L·∫•y th·ªùi gian c·ªßa nh√≥m th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y timeslots c·ªßa nh√≥m:', error);
    res.status(500).json({
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y th·ªùi gian c·ªßa nh√≥m'
    });
  }
};

// L·∫•y th·ªùi gian r·∫£nh chung c·ªßa nh√≥m
exports.getGroupAvailableTime = async (req, res) => {
  try {
    const groupId = req.params.groupId;
    const { start_date, end_date } = req.query;

    if (!start_date || !end_date) {
      return res.status(400).json({
        success: false,
        message: 'Ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c l√† b·∫Øt bu·ªôc'
      });
    }

    const result = await Time.getGroupAvailableTime(groupId, start_date, end_date);
    
    res.status(200).json({
      success: true,
      data: result,
      message: 'L·∫•y th·ªùi gian r·∫£nh chung th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y th·ªùi gian r·∫£nh chung:', error);
    res.status(500).json({
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi t√¨m th·ªùi gian r·∫£nh chung'
    });
  }
}; 