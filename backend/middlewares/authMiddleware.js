const jwt = require('jsonwebtoken');
const Group = require('../models/groupModel');
const config = require('../config');

// Middleware x√°c th·ª±c token
exports.verifyToken = (req, res, next) => {
  console.log('üé´ verifyToken middleware called');
  
  const authHeader = req.headers.authorization;
  
  if (!authHeader) {
    console.log('‚ùå No authorization header');
    return res.status(401).json({ message: 'Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c' });
  }
  
  const token = authHeader.split(' ')[1];
  console.log('üîë Token found:', token?.substring(0, 10) + '...');
  
  try {
    const decoded = jwt.verify(token, config.jwtSecret);
    req.user = decoded;
    console.log('‚úÖ Token verified, user:', decoded);
    next();
  } catch (error) {
    console.log('‚ùå Token verification failed:', error.message);
    return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
  }
};

// Middleware ki·ªÉm tra quy·ªÅn Admin
exports.isAdmin = (req, res, next) => {
  if (req.user && req.user.role === 'Admin') {
    next();
  } else {
    return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
  }
};

// Middleware ki·ªÉm tra quy·ªÅn Admin ho·∫∑c ch√≠nh ng∆∞·ªùi d√πng ƒë√≥
exports.isAdminOrSelf = (req, res, next) => {
  if (req.user && (req.user.role === 'Admin' || req.user.user_id === parseInt(req.params.id))) {
    next();
  } else {
    return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
  }
};

// Middleware ki·ªÉm tra quy·ªÅn Leader c·ªßa nh√≥m
exports.isGroupLeader = async (req, res, next) => {
  try {
    // L·∫•y groupId t·ª´ params ho·∫∑c body
    const groupId = req.params.id || req.params.groupId || req.body.group_id;
    
    if (!groupId) {
      return res.status(400).json({ message: 'Kh√¥ng t√¨m th·∫•y ID nh√≥m' });
    }

    const userId = req.user.user_id;
    
    // L·∫•y danh s√°ch th√†nh vi√™n c·ªßa nh√≥m
    const members = await Group.getMembers(groupId);
    
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† Leader c·ªßa nh√≥m kh√¥ng
    const isLeader = members.some(member => 
      member.user_id === userId && member.role_in_group === 'Leader'
    );
    
    if (isLeader || req.user.role === 'Admin') {
      next();
    } else {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
    }
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra quy·ªÅn Leader:', error);
    return res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra quy·ªÅn' });
  }
};

// Middleware ki·ªÉm tra quy·ªÅn Leader c·ªßa nh√≥m th√¥ng qua event
exports.isEventGroupLeader = async (req, res, next) => {
  try {
    const eventId = req.params.id;
    
    if (!eventId) {
      return res.status(400).json({ message: 'Kh√¥ng t√¨m th·∫•y ID s·ª± ki·ªán' });
    }

    // L·∫•y th√¥ng tin event ƒë·ªÉ c√≥ groupId
    const Event = require('../models/eventModel');
    const event = await Event.getById(eventId);
    
    if (!event) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán' });
    }

    const groupId = event.group_id;
    const userId = req.user.user_id;
    
    // L·∫•y danh s√°ch th√†nh vi√™n c·ªßa nh√≥m
    const members = await Group.getMembers(groupId);
    
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† Leader c·ªßa nh√≥m kh√¥ng
    const isLeader = members.some(member => 
      member.user_id === userId && member.role_in_group === 'Leader'
    );
    
    if (isLeader || req.user.role === 'Admin') {
      next();
    } else {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
    }
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra quy·ªÅn Leader qua event:', error);
    return res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra quy·ªÅn' });
  }
};

// Middleware ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† th√†nh vi√™n c·ªßa nh√≥m kh√¥ng
exports.isGroupMember = async (req, res, next) => {
  try {
    const groupId = req.params.id || req.params.groupId;
    const userId = req.user.user_id;
    
    // Admin lu√¥n c√≥ quy·ªÅn truy c·∫≠p
    if (req.user.role === 'Admin') {
      return next();
    }
    
    // L·∫•y danh s√°ch th√†nh vi√™n c·ªßa nh√≥m
    const members = await Group.getMembers(groupId);
    
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† th√†nh vi√™n c·ªßa nh√≥m kh√¥ng
    const isMember = members.some(member => member.user_id === userId);
    
    if (isMember) {
      next();
    } else {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng ph·∫£i l√† th√†nh vi√™n c·ªßa nh√≥m n√†y' });
    }
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra quy·ªÅn th√†nh vi√™n:', error);
    return res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra quy·ªÅn' });
  }
};

// Middleware ki·ªÉm tra quy·ªÅn Enterprise
exports.isEnterprise = (req, res, next) => {
  console.log('üîê isEnterprise middleware, user:', req.user);
  
  if (req.user && req.user.role === 'Enterprise') {
    console.log('‚úÖ Enterprise role verified');
    next();
  } else {
    console.log('‚ùå Not enterprise role:', req.user?.role);
    return res.status(403).json({ message: 'Ch·ªâ doanh nghi·ªáp m·ªõi c√≥ quy·ªÅn truy c·∫≠p' });
  }
};

// Middleware ki·ªÉm tra quy·ªÅn Enterprise ho·∫∑c Admin
exports.isEnterpriseOrAdmin = (req, res, next) => {
  if (req.user && (req.user.role === 'Enterprise' || req.user.role === 'Admin')) {
    next();
  } else {
    return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
  }
}; 