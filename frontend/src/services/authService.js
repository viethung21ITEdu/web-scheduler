import api from './api';

export const authService = {
  // ƒêƒÉng nh·∫≠p
  login: async (credentials) => {
    try {
      const response = await api.post('/users/login', {
        username: credentials.username, // Backend expects username field
        password: credentials.password
      });
      
      if (response.data.token) {
        localStorage.setItem('token', response.data.token);
        localStorage.setItem('user', JSON.stringify(response.data.user));
      }
      
      return response.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
    }
  },

  // ƒêƒÉng k√Ω
  register: async (userData) => {
    try {
      console.log('üöÄ API call to /users/register with:', userData);
      const response = await api.post('/users/register', userData);
      console.log('‚úÖ API response:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Register error:', error.response?.data || error.message);
      const errorMessage = error.response?.data?.message || error.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i';
      throw new Error(errorMessage);
    }
  },

  // ƒêƒÉng k√Ω (alias cho register)
  signup: async (userData) => {
    return await authService.register(userData);
  },

  // ƒêƒÉng xu·∫•t
  logout: () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  },

  // L·∫•y th√¥ng tin user hi·ªán t·∫°i
  getCurrentUser: () => {
    const userStr = localStorage.getItem('user');
    return userStr ? JSON.parse(userStr) : null;
  },

  // Ki·ªÉm tra ƒë√£ ƒëƒÉng nh·∫≠p
  isAuthenticated: () => {
    const token = localStorage.getItem('token');
    return !!token;
  },

  // L·∫•y token
  getToken: () => {
    return localStorage.getItem('token');
  },

  // Qu√™n m·∫≠t kh·∫©u
  forgotPassword: async (email) => {
    try {
      const response = await api.post('/users/forgot-password', { email });
      return response.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i email kh√¥i ph·ª•c');
    }
  },

  // ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
  resetPassword: async (email, resetCode, newPassword) => {
    try {
      const response = await api.post('/users/reset-password', { 
        email,
        resetCode,
        newPassword 
      });
      return response.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u');
    }
  },

  // G·ª≠i m√£ x√°c th·ª±c email
  sendEmailVerification: async (email, username) => {
    try {
      const response = await api.post('/users/send-email-verification', { 
        email,
        username 
      });
      return response.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i m√£ x√°c th·ª±c email');
    }
  },

  // X√°c th·ª±c m√£ email
  verifyEmailCode: async (email, verificationCode) => {
    try {
      const response = await api.post('/users/verify-email', { 
        email,
        verificationCode 
      });
      return response.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c email');
    }
  },

  // G·ª≠i l·∫°i m√£ x√°c th·ª±c email
  resendEmailVerification: async (email, username) => {
    try {
      const response = await api.post('/users/resend-email-verification', { 
        email,
        username 
      });
      return response.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i l·∫°i m√£ x√°c th·ª±c');
    }
  }
};
